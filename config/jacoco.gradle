apply plugin: 'jacoco'

jacoco {
    toolVersion = "0.8.7"
}

project.afterEvaluate {
    if (android.hasProperty("applicationVariants")) {
        android.applicationVariants.all { variant ->
            createVariantCoverage(variant)
        }
    } else if (android.hasProperty("libraryVariants")) {
        android.libraryVariants.all { variant ->
            createVariantCoverage(variant)
        }
    }
}

ext.excludes = [
              '**/data/**/*.*',
              '**/di/**/*.*',
              '**/models/**/*.*',
              '**/networking/**/*.*',
              '**/repository/**/*.*',
              '**/service/**/*.*',
              '**/ui/**/*.*',
              '**/utils/**/*.*',
              '**/databinding/**/*.*',
              '**/BR.*',
              '**/BuildConfig.*',
              '**/DataBindingTriggerClass.*',
              '**/*MapperImpl.*',
              '**/*GeneratedInjector.*',
              '**/*MyApplication.*',
              '**/*Module*.*',
              '**/GeneratedRequestManagerFactory.*',
              '**/*Module_*Factory.*',
              '**/generated/**/*.*',
              '**/baseandroid/*.*',
              '**/base/*.*',
            ]

def createVariantCoverage(variant) {
    def variantName = variant.name
    def testTaskName = "test${variantName.capitalize()}UnitTest"

    tasks.create(name: "${testTaskName}Coverage", type: JacocoReport, dependsOn: "$testTaskName") {
        group = "Reporting"
        description = "Generate Jacoco coverage reports for the ${variantName.capitalize()} build."

        reports {
            html.enabled = true
        }

        def javaClasses = fileTree(dir: variant.javaCompileProvider.get().destinationDir, excludes: project.excludes)
        def kotlinClasses = fileTree(dir: "${buildDir}/tmp/kotlin-classes/${variantName}", excludes: project.excludes)
        getClassDirectories().setFrom(files([javaClasses, kotlinClasses]))
        getSourceDirectories().setFrom(files([
                "$project.projectDir/src/main/java"
        ]))
        getExecutionData().setFrom(files("${project.buildDir}/outputs/unit_test_code_coverage/${variantName}UnitTest/${testTaskName}.exec"))
    }
}